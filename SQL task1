DROP DATABASE IF EXISTS libraryDB;
CREATE DATABASE libraryDB;
USE libraryDB;

CREATE TABLE Members (
    MemberID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    ContactNumber VARCHAR(15) UNIQUE,
    JoinDate DATE NOT NULL,
    Status ENUM('Active', 'Inactive') DEFAULT 'Active'
);

CREATE TABLE Catalog (
    BookID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(255) NOT NULL,
    Author VARCHAR(255) NOT NULL,
    Publisher VARCHAR(255),
    YearPublished INT,
    ISBN VARCHAR(13) UNIQUE,
    Category VARCHAR(50),
    AvailableCopies INT DEFAULT 0 CHECK (AvailableCopies >= 0)
);

CREATE TABLE BookLoans (
    LoanID INT PRIMARY KEY AUTO_INCREMENT,
    MemberID INT NOT NULL,
    BookID INT NOT NULL,
    IssueDate DATE NOT NULL,
    DueDate DATE GENERATED ALWAYS AS (DATE_ADD(IssueDate, INTERVAL 14 DAY)) VIRTUAL,
    ReturnDate DATE,
    LoanStatus ENUM('On Loan', 'Returned') DEFAULT 'On Loan',
    FOREIGN KEY (MemberID) REFERENCES Members(MemberID) ON DELETE CASCADE,
    FOREIGN KEY (BookID) REFERENCES Catalog(BookID) ON DELETE CASCADE
);

CREATE TABLE Penalties (
    PenaltyID INT PRIMARY KEY AUTO_INCREMENT,
    MemberID INT NOT NULL,
    LoanID INT NOT NULL,
    FineAmount DECIMAL(10, 2) NOT NULL,
    PaymentStatus ENUM('Unpaid', 'Paid') DEFAULT 'Unpaid',
    FOREIGN KEY (MemberID) REFERENCES Members(MemberID) ON DELETE CASCADE,
    FOREIGN KEY (LoanID) REFERENCES BookLoans(LoanID) ON DELETE CASCADE
);

CREATE TABLE Staff (
    StaffID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    EmploymentDate DATE NOT NULL
);

CREATE TABLE BookRequests (
    RequestID INT PRIMARY KEY AUTO_INCREMENT,
    MemberID INT NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Author VARCHAR(255),
    RequestStatus ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    RequestDate DATE NOT NULL,
    FOREIGN KEY (MemberID) REFERENCES Members(MemberID) ON DELETE CASCADE
);

CREATE TABLE Logs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    TableAffected VARCHAR(50),
    ActionType VARCHAR(50),
    Details TEXT,
    ActionTime DATETIME DEFAULT CURRENT_TIMESTAMP
);

DELIMITER //
CREATE TRIGGER AfterBookReturn
AFTER UPDATE ON BookLoans
FOR EACH ROW
BEGIN
    IF NEW.ReturnDate IS NOT NULL AND NEW.ReturnDate > NEW.DueDate THEN
        INSERT INTO Penalties (MemberID, LoanID, FineAmount, PaymentStatus)
        VALUES (NEW.MemberID, NEW.LoanID, DATEDIFF(NEW.ReturnDate, NEW.DueDate) * 1.00, 'Unpaid');
        
        INSERT INTO Logs (TableAffected, ActionType, Details, ActionTime)
        VALUES ('BookLoans', 'Late Return Fine', CONCAT('MemberID: ', NEW.MemberID, ', Fine: ', DATEDIFF(NEW.ReturnDate, NEW.DueDate) * 1.00), NOW());
    END IF;
END;
//
DELIMITER ;

INSERT INTO Members (FirstName, LastName, Email, ContactNumber, JoinDate, Status)
VALUES 
('John', 'Doe', 'johndoe@example.com', '1234567890', '2023-01-01', 'Active'),
('Jane', 'Smith', 'janesmith@example.com', '0987654321', '2023-01-02', 'Active'),
('Alice', 'Brown', 'alicebrown@example.com', '1231231231', '2023-02-01', 'Active'),
('Bob', 'White', 'bobwhite@example.com', '3213213210', '2023-03-01', 'Inactive'),
('Charlie', 'Green', 'charliegreen@example.com', '1112223333', '2023-04-01', 'Active');

INSERT INTO Catalog (Title, Author, Publisher, YearPublished, ISBN, Category, AvailableCopies)
VALUES 
('The Great Gatsby', 'F. Scott Fitzgerald', 'Scribner', 1925, '9780743273565', 'Fiction', 5),
('1984', 'George Orwell', 'Secker & Warburg', 1949, '9780451524935', 'Dystopian', 3),
('The Catcher in the Rye', 'J.D. Salinger', 'Little, Brown and Company', 1951, '9780316769488', 'Classic', 10),
('To Kill a Mockingbird', 'Harper Lee', 'J.B. Lippincott & Co.', 1960, '9780061120084', 'Fiction', 8),
('Brave New World', 'Aldous Huxley', 'Chatto & Windus', 1932, '9780060850524', 'Dystopian', 6);

INSERT INTO BookLoans (MemberID, BookID, IssueDate, ReturnDate, LoanStatus)
VALUES 
(1, 1, '2023-01-03', NULL, 'On Loan'),
(2, 2, '2023-01-03', '2023-01-10', 'Returned'),
(1, 3, '2023-03-01', '2023-03-15', 'Returned'),
(2, 4, '2023-03-05', NULL, 'On Loan'),
(3, 5, '2023-03-10', '2023-03-25', 'Returned');

INSERT INTO Penalties (MemberID, LoanID, FineAmount, PaymentStatus)
VALUES 
(1, 1, 5.00, 'Paid'),
(2, 2, 10.00, 'Unpaid'),
(3, 3, 0.00, 'Paid');

INSERT INTO Staff (FirstName, LastName, Email, EmploymentDate)
VALUES 
('Diana', 'Prince', 'dianaprince@example.com', '2023-02-01'),
('Clark', 'Kent', 'clarkkent@example.com', '2023-03-01'),
('Bruce', 'Wayne', 'brucewayne@example.com', '2023-04-01');

INSERT INTO BookRequests (MemberID, Title, Author, RequestStatus, RequestDate)
VALUES 
(1, 'Pride and Prejudice', 'Jane Austen', 'Approved', '2023-03-01'),
(2, 'Moby-Dick', 'Herman Melville', 'Rejected', '2023-03-05'),
(3, 'War and Peace', 'Leo Tolstoy', 'Pending', '2023-03-10');

SELECT * FROM Members;
SELECT * FROM Catalog;
SELECT * FROM BookLoans;
SELECT * FROM Penalties;
SELECT * FROM Staff;
SELECT * FROM BookRequests;
SELECT * FROM Logs;
